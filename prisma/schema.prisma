// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                 String           @id @default(uuid())
  brand              String
  title              String
  description        String
  price              Float
  productImages      Image[]
  productInformation String
  isNew              Boolean          @default(false)
  isTrending         Boolean          @default(false)
  salesCount         Int              @default(0)
  categoryId         String
  category           Category         @relation(fields: [categoryId], references: [id])
  options            ProductOption[]
  variants           ProductVariant[]
  reviews            Review[]
  discounts          Discount[]       @relation("ProductDiscounts")
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model ProductOption {
  id        String               @id @default(uuid())
  name      String
  productId String
  product   Product              @relation(fields: [productId], references: [id])
  values    ProductOptionValue[]
}

model ProductVariantOption {
  id               String         @id @default(uuid())
  name             String
  value            String
  productVariantId String
  product          ProductVariant @relation(fields: [productVariantId], references: [id])
}

model ProductOptionValue {
  id       String        @id @default(uuid())
  value    String
  optionId String
  option   ProductOption @relation(fields: [optionId], references: [id])
}

model ProductVariant {
  id         String                 @id @default(uuid())
  productId  String
  product    Product                @relation(fields: [productId], references: [id])
  cartItems  CartItem[]
  orderItems OrderItem[]
  sku        String                 @unique
  price      Float
  stock      Int
  options    ProductVariantOption[]
  images     Image[]
  discounts  Discount[]             @relation("VariantsDiscounts")
  createdAt  DateTime               @default(now())
  updatedAt  DateTime               @updatedAt
}

model Category {
  id            String     @id @default(uuid())
  title         String
  slug          String     @unique
  parentId      String?
  parent        Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  subcategories Category[] @relation("CategoryHierarchy")
  products      Product[]
  images        Image[]
  discounts     Discount[] @relation("CategoriesDiscounts")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  title     String?
  comment   String?
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, userId])
}

model User {
  id                String            @id @default(uuid())
  email             String            @unique
  name              String
  password          String
  role              UserRole          @default(USER)
  reviews           Review[]
  orders            Order[]
  cart              Cart?
  discountCode      DiscountCode[]
  shippingAddresses ShippingAddress[]
  // Add wishlist, orders etc.
}

enum UserRole {
  ADMIN
  USER
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  user      User       @relation(fields: [userId], references: [id])
  items     CartItem[]
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id        String         @id @default(uuid())
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  cartId    String
  cart      Cart           @relation(fields: [cartId], references: [id])
  quantity  Int

  @@unique([cartId, variantId])
}

model Discount {
  id          String        @id @default(uuid())
  title       String
  description String
  type        DiscountType
  amount      Float
  startDate   DateTime
  endDate     DateTime
  active      Boolean       @default(false)
  appliesTo   DiscountScope
  combinable  Boolean       @default(true)

  // Relationships
  products   Product[]        @relation("ProductDiscounts")
  variants   ProductVariant[] @relation("VariantsDiscounts")
  categories Category[]       @relation("CategoriesDiscounts")
  codes      DiscountCode[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DiscountCode {
  id           String    @id @default(uuid())
  code         String    @unique
  description  String?
  expiresAt    DateTime?
  minCartValue Int?
  maxUses      Int?
  usedCount    Int       @default(0)
  userSpecific Boolean   @default(false)
  discountId   String
  discount     Discount  @relation(fields: [discountId], references: [id])
  userId       String?
  user         User?     @relation(fields: [userId], references: [id])
  active       Boolean   @default(true)
}

enum DiscountType {
  PERCENTAGE
  AMOUNT
}

enum DiscountScope {
  PRODUCT
  VARIANT
  CATEGORY
  CART
}

model Image {
  id               String          @id @default(uuid())
  url              String
  altText          String?
  productId        String?
  product          Product?        @relation(fields: [productId], references: [id])
  categoryId       String?
  category         Category?       @relation(fields: [categoryId], references: [id])
  bannerId         String?
  banner           Banner?         @relation(fields: [bannerId], references: [id])
  productVariantId String?
  productVariant   ProductVariant? @relation(fields: [productVariantId], references: [id])
}

model Banner {
  id          String   @id @default(uuid())
  title       String
  description String
  link        String
  images      Image[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HomepageWidget {
  id          String       @id @default(uuid())
  type        WidgetType
  title       String?
  order       Int
  widgetItems WidgetItem[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model WidgetItem {
  id        String         @id @default(uuid())
  widgetId  String
  widget    HomepageWidget @relation(fields: [widgetId], references: [id])
  type      WidgetItemType
  itemId    String
  order     Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  items     OrderItem[]
  total     Float
  status    OrderStatus
  payment   Payment?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model OrderItem {
  id        String         @id @default(uuid())
  orderId   String
  order     Order          @relation(fields: [orderId], references: [id])
  variantId String
  variant   ProductVariant @relation(fields: [variantId], references: [id])
  quantity  Int
  price     Float
}

model Payment {
  id        String        @id @default(uuid())
  orderId   String        @unique
  order     Order         @relation(fields: [orderId], references: [id])
  provider  String
  status    PaymentStatus
  amount    Float
  createdAt DateTime      @default(now())
}

model ShippingAddress {
  id         String  @id @default(uuid())
  userId     String
  user       User    @relation(fields: [userId], references: [id])
  fullName   String
  address1   String
  address2   String?
  city       String
  state      String
  country    String
  postalCode String
  phone      String
  isDefault  Boolean @default(false)
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
}

enum OrderStatus {
  PENDING // Order Created, awaiting payment
  PAID // Payment received
  CONFIRMED // Order confirmed by seller
  PROCESSING // Order is being prepared
  SHIPPED // Order shipped but not yet delivered
  DELIVERED // Order successfully delivered
  CANCELLED // Cancelled by user or admin
  RETURN_REQUESTED // Customer initiated a return 
  RETURNED // Return completed
  REFUNDED // Refund issued
  FAILED // Refund issued
}

enum WidgetType {
  HERO_BANNER
  PRODUCT_CAROUSEL
  CATEGORY_GRID
  CUSTOM_SECTION
}

enum WidgetItemType {
  PRODUCT
  CATEGORY
  BANNER
}
